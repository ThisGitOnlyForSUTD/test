{"ast":null,"code":"import { createStore } from 'vuex';\nimport _ from \"lodash\";\nexport default createStore({\n  state: {\n    posts: [],\n    comments: [],\n    users: [],\n    page: 1,\n    limit: 20,\n    loading: false\n  },\n  getters: {},\n  mutations: {\n    SET_POSTS(state, posts) {\n      state.posts = posts;\n    },\n    IS_LOADING(state, value) {\n      state.dataAwait = value;\n    }\n  },\n  actions: {\n    async fetchPosts({\n      commit\n    }) {\n      commit('IS_LOADING', true); // Устанавливаем флаг ожидания\n\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n        const posts = await response.json();\n        commit('SET_POSTS', posts);\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      } finally {\n        commit('IS_LOADING', false);\n      }\n    },\n    async fetchUsers({\n      commit\n    }) {\n      commit('IS_LOADING', true); // Устанавливаем флаг ожидания\n\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\n        const users = await response.json();\n        commit('SET_USERS', users); // Вызываем мутацию для обновления данных\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      } finally {\n        commit('IS_LOADING', false); // Снимаем флаг ожидания\n      }\n    },\n\n    async getFilteredPosts(userId) {\n      this.posts = [];\n      const res = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`);\n      const posts = await res.json();\n      this.is_data_await = true;\n      if (res.ok) {\n        this.is_data_await = false;\n        this.posts = posts;\n      } else {\n        console.log(\"Ошибка получения данных с сервера\");\n        throw Error;\n      }\n    },\n    /** Получить список пользователей */\n    async getUsers() {\n      this.users = [];\n      const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const users = await res.json();\n      this.is_data_await = true;\n      if (res.ok) {\n        this.is_data_await = false;\n        this.users = users;\n        this.users_keyBy = _.keyBy(users, \"id\");\n      } else {\n        console.log(\"Ошибка получения данных с сервера\");\n        throw Error;\n      }\n    },\n    /** Получить список комментариев */\n    async getComments() {\n      this.comments = [];\n      const res = await fetch(\"https://jsonplaceholder.typicode.com/comments\");\n      const comments = await res.json();\n      if (res.ok) {\n        this.comments = comments;\n        this.comments_groupBy = _.groupBy(comments, \"postId\");\n      } else {\n        console.log(\"Ошибка получения данных с сервера\");\n        throw Error;\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","_","state","posts","comments","users","page","limit","loading","getters","mutations","SET_POSTS","IS_LOADING","value","dataAwait","actions","fetchPosts","commit","response","fetch","json","error","console","fetchUsers","getFilteredPosts","userId","res","is_data_await","ok","log","Error","getUsers","users_keyBy","keyBy","getComments","comments_groupBy","groupBy","modules"],"sources":["/Users/danilagalitskiy/PhpstormProjects/wahelpwe/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport _ from \"lodash\";\n\nexport default createStore({\n  state: {\n    posts: [],\n    comments: [],\n    users: [],\n    page: 1,\n    limit: 20,\n    loading: false,\n  },\n  getters: {\n  },\n  mutations: {\n    SET_POSTS(state, posts) {\n      state.posts = posts;\n    },\n    IS_LOADING(state, value) {\n      state.dataAwait = value;\n    },\n  },\n  actions: {\n    async fetchPosts({ commit }) {\n      commit('IS_LOADING', true); // Устанавливаем флаг ожидания\n\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n          const posts = await response.json();\n          commit('SET_POSTS', posts);\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      } finally {\n        commit('IS_LOADING', false);\n      }\n    },\n    async fetchUsers({ commit }) {\n      commit('IS_LOADING', true); // Устанавливаем флаг ожидания\n\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\n        const users = await response.json();\n        commit('SET_USERS', users); // Вызываем мутацию для обновления данных\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      } finally {\n        commit('IS_LOADING', false); // Снимаем флаг ожидания\n      }\n    },\n\n    async getFilteredPosts(userId) {\n      this.posts = [];\n      const res = await fetch(\n        `https://jsonplaceholder.typicode.com/posts?userId=${userId}`\n      );\n      const posts = await res.json();\n      this.is_data_await = true;\n      if (res.ok) {\n        this.is_data_await = false;\n        this.posts = posts;\n      } else {\n        console.log(\"Ошибка получения данных с сервера\");\n        throw Error;\n      }\n    },\n\n    /** Получить список пользователей */\n    async getUsers() {\n      this.users = [];\n      const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const users = await res.json();\n      this.is_data_await = true;\n      if (res.ok) {\n        this.is_data_await = false;\n        this.users = users;\n        this.users_keyBy = _.keyBy(users, \"id\");\n      } else {\n        console.log(\"Ошибка получения данных с сервера\");\n        throw Error;\n      }\n    },\n\n    /** Получить список комментариев */\n    async getComments() {\n      this.comments = [];\n      const res = await fetch(\"https://jsonplaceholder.typicode.com/comments\");\n      const comments = await res.json();\n      if (res.ok) {\n        this.comments = comments;\n        this.comments_groupBy = _.groupBy(comments, \"postId\");\n      } else {\n        console.log(\"Ошибка получения данных с сервера\");\n        throw Error;\n      }\n    },\n  },\n  modules: {\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}