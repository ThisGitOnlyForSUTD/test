{"ast":null,"code":"import { createStore } from 'vuex';\nimport _ from \"lodash\";\nexport default createStore({\n  state: {\n    posts: [],\n    comments: [],\n    users: [],\n    page: 1,\n    limit: 20,\n    loading: false\n  },\n  getters: {},\n  mutations: {\n    SET_POSTS(state, posts) {\n      state.posts = posts;\n    },\n    IS_LOADING(state, value) {\n      state.dataAwait = value;\n    },\n    SET_USERS(state, users) {\n      state.users = users;\n    }\n  },\n  actions: {\n    async fetchPosts({\n      commit\n    }) {\n      commit('IS_LOADING', true);\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n        const posts = await response.json();\n        commit('SET_POSTS', posts);\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      } finally {\n        commit('IS_LOADING', false);\n      }\n    },\n    async fetchUsers({\n      commit\n    }) {\n      commit('IS_LOADING', true); // Устанавливаем флаг ожидания\n\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\n        const users = await response.json();\n        commit('SET_USERS', users); // Вызываем мутацию для обновления данных\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      } finally {\n        commit('IS_LOADING', false); // Снимаем флаг ожидания\n      }\n    },\n\n    async fetchFilteredPosts({\n      commit\n    }, userId) {\n      commit('SET_DATA_AWAIT', true); // Устанавливаем флаг ожидания\n\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`);\n        const posts = await response.json();\n        commit('SET_POSTS', posts); // Вызываем мутацию для обновления данных\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      } finally {\n        commit('SET_DATA_AWAIT', false); // Снимаем флаг ожидания\n      }\n    },\n\n    // Другие действия...\n\n    /** Получить список комментариев */\n    async fetchComments({\n      commit\n    }) {\n      try {\n        // Выполняем запрос к API для получения комментариев\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n        const comments = await response.json();\n        commit('SET_COMMENTS', comments); // Вызываем мутацию для обновления данных\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","_","state","posts","comments","users","page","limit","loading","getters","mutations","SET_POSTS","IS_LOADING","value","dataAwait","SET_USERS","actions","fetchPosts","commit","response","fetch","json","error","console","fetchUsers","fetchFilteredPosts","userId","fetchComments","modules"],"sources":["/Users/danilagalitskiy/PhpstormProjects/wahelpwe/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport _ from \"lodash\";\n\nexport default createStore({\n  state: {\n    posts: [],\n    comments: [],\n    users: [],\n    page: 1,\n    limit: 20,\n    loading: false,\n  },\n  getters: {\n  },\n  mutations: {\n    SET_POSTS(state, posts) {\n      state.posts = posts;\n    },\n    IS_LOADING(state, value) {\n      state.dataAwait = value;\n    },\n    SET_USERS(state, users) {\n      state.users = users;\n    },\n  },\n  actions: {\n    async fetchPosts({ commit }) {\n      commit('IS_LOADING', true)\n\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n          const posts = await response.json();\n          commit('SET_POSTS', posts);\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      } finally {\n        commit('IS_LOADING', false);\n      }\n    },\n    async fetchUsers({ commit }) {\n      commit('IS_LOADING', true); // Устанавливаем флаг ожидания\n\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\n        const users = await response.json();\n        commit('SET_USERS', users); // Вызываем мутацию для обновления данных\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      } finally {\n        commit('IS_LOADING', false); // Снимаем флаг ожидания\n      }\n    },\n\n    async fetchFilteredPosts({ commit }, userId) {\n      commit('SET_DATA_AWAIT', true); // Устанавливаем флаг ожидания\n\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`);\n        const posts = await response.json();\n        commit('SET_POSTS', posts); // Вызываем мутацию для обновления данных\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      } finally {\n        commit('SET_DATA_AWAIT', false); // Снимаем флаг ожидания\n      }\n    },\n    // Другие действия...\n\n    /** Получить список комментариев */\n    async fetchComments({ commit }) {\n      try {\n        // Выполняем запрос к API для получения комментариев\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n        const comments = await response.json();\n        commit('SET_COMMENTS', comments); // Вызываем мутацию для обновления данных\n      } catch (error) {\n        console.error('Произошла ошибка:', error);\n      }\n    },\n  },\n  modules: {\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}