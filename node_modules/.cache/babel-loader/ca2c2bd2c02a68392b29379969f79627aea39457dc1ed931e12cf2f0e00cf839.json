{"ast":null,"code":"import { normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-78f3b9f3\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"tabs-view\"\n};\nconst _hoisted_2 = {\n  class: \"tabs-view__tabs\"\n};\nconst _hoisted_3 = {\n  class: \"tabs-view__content\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"tabs-view__current-user\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"strong\", null, \" All posts user: \", -1 /* HOISTED */));\nconst _hoisted_6 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_w_button = _resolveComponent(\"w-button\");\n  const _component_post_dialog = _resolveComponent(\"post-dialog\");\n  const _component_OneUser = _resolveComponent(\"OneUser\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n    class: _normalizeClass(['tabs-view__tab', {\n      active: $data.is_active_posts\n    }]),\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.selectPostsTab && $options.selectPostsTab(...args))\n  }, \" Посты \", 2 /* CLASS */), _createElementVNode(\"div\", {\n    class: _normalizeClass(['tabs-view__tab', {\n      active: $data.is_active_users\n    }]),\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.selectUsersTab && $options.selectUsersTab(...args))\n  }, \" Пользователи \", 2 /* CLASS */)]), _createElementVNode(\"div\", _hoisted_3, [$data.is_active_one_user && $data.is_active_posts ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"h2\", null, [_hoisted_5, _createTextVNode(\" \" + _toDisplayString($data.name_filtered_user), 1 /* TEXT */)]), _createVNode(_component_w_button, {\n    text: \"Закрыть\",\n    close: \"\",\n    onClick: $options.clearFilter\n  }, null, 8 /* PROPS */, [\"onClick\"])])) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id,\n      class: _normalizeClass(['posts_list', {\n        hidden: !$data.is_active_posts\n      }])\n    }, [_createVNode(_component_post_dialog, {\n      user: $data.currentsUsers[post.userId]?.name,\n      post: post.body,\n      comments: $data.comments_groupBy[post.id],\n      postId: post.id,\n      onGetPosts: _cache[2] || (_cache[2] = $event => _ctx.$store.dispatch('fetchPosts'))\n    }, null, 8 /* PROPS */, [\"user\", \"post\", \"comments\", \"postId\"])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */)), $options.isLoading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_6, \"Данные загружаются...\")) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.users, user => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: user.id,\n      class: _normalizeClass(['users_list', {\n        hidden: !$data.is_active_users\n      }])\n    }, [_createVNode(_component_OneUser, {\n      userId: user.id,\n      username: user.name,\n      is_active_posts: $data.is_active_posts,\n      is_active_users: $data.is_active_users,\n      onShowPostsUser: $options.showPostsUser\n    }, null, 8 /* PROPS */, [\"userId\", \"username\", \"is_active_posts\", \"is_active_users\", \"onShowPostsUser\"])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_normalizeClass","active","$data","is_active_posts","onClick","_cache","args","$options","selectPostsTab","is_active_users","selectUsersTab","_hoisted_3","is_active_one_user","_hoisted_4","_hoisted_5","_toDisplayString","name_filtered_user","_createVNode","_component_w_button","text","close","clearFilter","_Fragment","_renderList","posts","post","key","id","hidden","_component_post_dialog","user","currentsUsers","userId","name","body","comments","comments_groupBy","postId","onGetPosts","$event","_ctx","$store","dispatch","isLoading","_hoisted_6","users","_component_OneUser","username","onShowPostsUser","showPostsUser"],"sources":["/Users/danilagalitskiy/PhpstormProjects/wahelpwe/src/components/TabsView.vue"],"sourcesContent":["<template>\n  <div class=\"tabs-view\">\n    <div class=\"tabs-view__tabs\">\n      <div\n        :class=\"['tabs-view__tab', { active: is_active_posts }]\"\n        @click=\"selectPostsTab\"\n      >\n        Посты\n      </div>\n      <div\n        :class=\"['tabs-view__tab', { active: is_active_users }]\"\n        @click=\"selectUsersTab\"\n      >\n        Пользователи\n      </div>\n    </div>\n    <div class=\"tabs-view__content\">\n      <div\n        class=\"tabs-view__current-user\"\n        v-if=\"is_active_one_user && is_active_posts\"\n      >\n        <h2>\n          <strong>\n            All posts user:\n          </strong>\n          {{ name_filtered_user }}\n        </h2>\n        <w-button\n          text=\"Закрыть\"\n          close\n          @click=\"clearFilter\"\n        />\n      </div>\n      <div\n        v-for=\"post in posts\"\n        :key=\"post.id\"\n        :class=\"['posts_list', { hidden: !is_active_posts }]\"\n      >\n        <post-dialog\n          :user=\"currentsUsers[post.userId]?.name\"\n          :post=\"post.body\"\n          :comments=\"comments_groupBy[post.id]\"\n          :postId=\"post.id\"\n          @getPosts=\"$store.dispatch('fetchPosts')\"\n        />\n      </div>\n      <p v-if=\"isLoading\">Данные загружаются...</p>\n      <div\n        v-for=\"user in users\"\n        :key=\"user.id\"\n        :class=\"['users_list', { hidden: !is_active_users }]\"\n      >\n        <OneUser\n          :userId=\"user.id\"\n          :username=\"user.name\"\n          :is_active_posts=\"is_active_posts\"\n          :is_active_users=\"is_active_users\"\n          @showPostsUser=\"showPostsUser\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport PostDialog from \"./parts/PostDialog.vue\";\nimport OneUser from \"./OneUser.vue\";\n// import OneUserPosts from './OneUserPosts.vue';\nimport WButton from \"@/components/ui/WButton.vue\";\nimport _ from \"lodash\";\nexport default {\n  name: \"TabsMain\",\n  components: {\n    WButton,\n    PostDialog,\n    OneUser,\n    // OneUserPosts,\n  },\n  data() {\n    return {\n      currentsUsers: {}, // список пользователей по id\n      comments_groupBy: {}, // список комментарий для каждого поста\n\n      /** Статусы */\n      is_active_posts: true, //активен таб с постами\n      is_active_users: false, //активен таб с пользователями\n      name_filtered_user: \"\", // имя пользователя, по котормоу фильтруем\n      is_active_one_user: false, // смотрим посты одного пользователя\n      page: 1 /* текущая страница */,\n      limit: 20 /* количество постов получаемых за один раз */,\n    };\n  },\n\n  methods: {\n    /** Выбрать таб с постами */\n    selectPostsTab() {\n      this.is_active_posts = true;\n      this.is_active_users = false;\n    },\n\n    /** Выбрать таб с пользователями */\n    selectUsersTab() {\n      this.is_active_posts = false;\n      this.is_active_users = true;\n    },\n\n    /** Просмотреть посты пользователя */\n    showPostsUser(userId, username) {\n      this.selectPostsTab();\n      this.is_active_one_user = true;\n      this.name_filtered_user = username;\n      this.posts = [];\n      this.$store.dispatch('fetchComments', userId)\n    },\n\n    /** Сбросить фильтр */\n    clearFilter() {\n      this.posts = [];\n      this.is_active_one_user = false;\n      this.$store.dispatch('fetchPosts')\n    },\n\n    /** Скроллинг */\n    fHandleScroll() {\n      if (\n        window.scrollY + window.innerHeight  >= document.body.scrollHeight - 50 &&\n        !this.is_active_one_user &&\n        !this.isLoading\n      ) {\n          this.$store.state.page++;\n          this.$store.dispatch('fetchPosts')\n      }\n    },\n  },\n  computed: {\n    isLoading() {\n      return this.$store.state.loading\n    },\n    posts() {\n      return this.$store.state.posts\n    },\n    comments() {\n      return this.$store.state.comments\n    },\n    users() {\n      return this.$store.state.users\n    },\n  },\n  mounted() {\n    this.$store.dispatch('fetchPosts')\n    this.$store.dispatch('fetchComments')\n    this.$store.dispatch('fetchUsers')\n    this.currentsUsers = _.keyBy(this.users, \"id\")\n    window.addEventListener(\"scroll\", this.fHandleScroll);\n  },\n\n  beforeUnmount() {\n    window.removeEventListener(\"scroll\", this.fHandleScroll);\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n$border_black: 1px solid black;\n$border_width: 1px solid;\n$margin_align_center: 0 auto;\n$tab_content_width: 83vw;\n$tab_content_margin_top: 2rem;\n$filtered_user_header_display: flex;\n$content_align_header: center;\n$button_close_size: 20px;\n$margin_left_close_button: 1rem;\n$hidden_view_block: none;\n$cursor: pointer;\n$tabs_display: flex;\n$tabs_gap: 30px;\n$tabs_content_align: center;\n\n.tabs-view {\n  width: 100%;\n  max-width: 900px;\n  margin: 0 auto;\n  &__tabs {\n    display: flex;\n    justify-content: center;\n    gap: 60px;\n    align-items: center;\n  }\n  &__tab {\n    padding: 10px 15px;\n    border-radius: 40px;\n    cursor: pointer;\n  }\n\n  &__content {\n    margin-top: $tab_content_margin_top;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n  }\n}\n.active {\n  background-color: grey;\n}\n\n.posts-tab,\n.users-tab {\n  width: 40vw;\n  border-color: black;\n  border-top: $border_width;\n  border-left: $border_width;\n  border-right: $border_width;\n}\n\n.posts-tab:hover,\n.users-tab:hover {\n  cursor: $cursor;\n}\n\n.hidden {\n  display: none;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAiB;;EAcvBA,KAAK,EAAC;AAAoB;;;EAE3BA,KAAK,EAAC;;gEAIJC,mBAAA,CAES,gBAFD,mBAER;;;;;;;;uBAvBRC,mBAAA,CA4DM,OA5DNC,UA4DM,GA3DJF,mBAAA,CAaM,OAbNG,UAaM,GAZJH,mBAAA,CAKM;IAJHD,KAAK,EAAAK,eAAA;MAAAC,MAAA,EAA+BC,KAAA,CAAAC;IAAe;IACnDC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,cAAA,IAAAD,QAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;KACvB,SAED,kBACAV,mBAAA,CAKM;IAJHD,KAAK,EAAAK,eAAA;MAAAC,MAAA,EAA+BC,KAAA,CAAAO;IAAe;IACnDL,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,cAAA,IAAAH,QAAA,CAAAG,cAAA,IAAAJ,IAAA,CAAc;KACvB,gBAED,iB,GAEFV,mBAAA,CA4CM,OA5CNe,UA4CM,GAzCIT,KAAA,CAAAU,kBAAkB,IAAIV,KAAA,CAAAC,eAAe,I,cAF7CN,mBAAA,CAeM,OAfNgB,UAeM,GAXJjB,mBAAA,CAKK,aAJHkB,UAES,E,iBAAA,GACT,GAAAC,gBAAA,CAAGb,KAAA,CAAAc,kBAAkB,iB,GAEvBC,YAAA,CAIEC,mBAAA;IAHAC,IAAI,EAAC,SAAS;IACdC,KAAK,EAAL,EAAK;IACJhB,OAAK,EAAEG,QAAA,CAAAc;kGAGZxB,mBAAA,CAYMyB,SAAA,QAAAC,WAAA,CAXWhB,QAAA,CAAAiB,KAAK,EAAbC,IAAI;yBADb5B,mBAAA,CAYM;MAVH6B,GAAG,EAAED,IAAI,CAACE,EAAE;MACZhC,KAAK,EAAAK,eAAA;QAAA4B,MAAA,GAA4B1B,KAAA,CAAAC;MAAe;QAEjDc,YAAA,CAMEY,sBAAA;MALCC,IAAI,EAAE5B,KAAA,CAAA6B,aAAa,CAACN,IAAI,CAACO,MAAM,GAAGC,IAAI;MACtCR,IAAI,EAAEA,IAAI,CAACS,IAAI;MACfC,QAAQ,EAAEjC,KAAA,CAAAkC,gBAAgB,CAACX,IAAI,CAACE,EAAE;MAClCU,MAAM,EAAEZ,IAAI,CAACE,EAAE;MACfW,UAAQ,EAAAjC,MAAA,QAAAA,MAAA,MAAAkC,MAAA,IAAEC,IAAA,CAAAC,MAAM,CAACC,QAAQ;;kCAGrBnC,QAAA,CAAAoC,SAAS,I,cAAlB9C,mBAAA,CAA6C,KAAA+C,UAAA,EAAzB,uBAAqB,K,sDACzC/C,mBAAA,CAYMyB,SAAA,QAAAC,WAAA,CAXWhB,QAAA,CAAAsC,KAAK,EAAbf,IAAI;yBADbjC,mBAAA,CAYM;MAVH6B,GAAG,EAAEI,IAAI,CAACH,EAAE;MACZhC,KAAK,EAAAK,eAAA;QAAA4B,MAAA,GAA4B1B,KAAA,CAAAO;MAAe;QAEjDQ,YAAA,CAME6B,kBAAA;MALCd,MAAM,EAAEF,IAAI,CAACH,EAAE;MACfoB,QAAQ,EAAEjB,IAAI,CAACG,IAAI;MACnB9B,eAAe,EAAED,KAAA,CAAAC,eAAe;MAChCM,eAAe,EAAEP,KAAA,CAAAO,eAAe;MAChCuC,eAAa,EAAEzC,QAAA,CAAA0C"},"metadata":{},"sourceType":"module","externalDependencies":[]}